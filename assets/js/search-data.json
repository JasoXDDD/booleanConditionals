{
  
    
        "post0": {
            "title": "Grades",
            "content": "Name Grade Comment . Agarwal, Rohan | - | No submission | . Albertson, Christopher S. | 0.8 | The code has an input and some of the code is changed for the binary conversion. However, there aren&#39;t any new functions that were added to the code. | . Beg, Mirza H. | 0.8 | No submission | . Carcamo, Orlando J. | - | No submission | . Chilla, Prasith M. | 0.8 | The code is the same as the one given from the fastpages but had the input | . Deng, Zeen | 0.9 | The program has added code that works to form another function. The added code uses if statement and binary correctly which also shows understanding. | . Garrett, Dylan C. | - | No submission | . Gaurav, Ananya | 0.95 | All of the code was recreated and was explained thoroughly. This shows great understanding of the code created. Input was also added as well as a function converting text to binary, showing greater understanding. | . Gautam, Vyaan | - | No submission | . Goel, Shivansh T. | Presented | | . Grewal, Noor K | 0.9 | They got this grade since they did the task that was asked of them. The code was their own which gave them the .9 | . Hakimipour, Ryan | Presented | | . Jaisankar Gnanam, Harshavaratan | 0.8 | They got this grade since they did the task that was asked of them but used the same piece of code given to them. Extra credit that was done doesn’t give them anything since it was copied from other students. | . Kim, Nathan S. | 1 | Although the code is the same as the one given to them he made the dec to bin converter also using frontend code. | . Kim, Tay E. | 0.9 | They got this grade because they fully completed the homework assignment and using their own code. | . Lee, Dillon W. | 0.9 | They got his grade since they fully completed the homework assignment using their own code. | . Lu, Alexander Y. | 1 | They got this grade since they one created the dec to bin converter like asked and also made a letter to bin converter, a octal representation of a number, and a Hexadecimal representation of number | . Malayath, Shruthi | 0.93 | They got this grade since they used original code when making the dec to bin converter and the also made another one using while loops which was done for extra credit | . Mills, Colin J. | 0.95 | They got this grad since they used original code when making the dec to bin converter and also record the length of the bin value telling you the bit length | . Mir, Emaad I. | 0.9 | They got this grade because they completed the necessary homework assignment as well as including all the completed and correct challenges which was extra than what was necessary. | . Moore, Lucas E. | presented | | . Nawandhar, Aditya A. | 1 | Completed the necessary hacks with their own code and added extra with hexadecimal | . Nguyen, Jaden T. | 0.9 | Completed the necessary hacks but did not do anything above or extra | . Okimoto, Keira S. | 1 | Completed the necessary hacks and went above and beyond the necessary criteria. Created own code with multiple inputs and loops that weren’t required. | . Patil, Tanisha A. | 0.9 | Completed the necessary requirements of the homework | . Ramamurthy, Chinmay D. | 0.95 | Completed the necessary requirements of homework but did nothing extra. | . Reed, Andrew S. | - | No submission | . Ringler, Alyssa L. | - | No submission | . Ruiz, Adan J. | 0.8 | This just adds some irrelevant code that does not change the code | . Sarurkar, Shreyas V. | 0.7 | This code does not change anything whatsoever | . Savlani, Jiya P. | 0.9 | The code has all the hacks incorporated and was their own code. | . Sommers, Sabine B. | 0.85 | The code is theirs and fully accomplishes the task except there is no input which is why they got below a .9 | . Tang, Aliya W. | 0.95 | The code is fully theirs and they also added their a dec to octal converter | . Tang, Sophia H. | 0.9 | The code is fully theirs and fully accomplishes the task given | . Tong, Haoxuan | Presented | | . Tullius, Max D. | 0.9 | The code is fully theirs and fully accomplishes the task given | . Wu, Lily | 1 | The given code was really impressive using conditionals and also made it so you can keep inputting dec number changing them into bin and the user could choose when they wanted to stop | . Zhao, Ethan Y. | - | No submission | .",
            "url": "https://jasoxddd.github.io/booleanConditionals/2022/12/06/grade.html",
            "relUrl": "/2022/12/06/grade.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Boolean expression",
            "content": "Introduction to the Lesson . Booleans are like binary, having 2 possible values, but in Boolean, True is 1 and False is 0. By using boolean operators, a boolean value can be produced. . Important Vocabulary . Boolean | Relational Operator | Logical Operator | . Boolean Operators . Boolean operators produces booleans after it is used between two values . Relational Operators . Relational Operators can work between any two values of the same type known as operands, provided that the type supports such types of operators They consist of the operators ==, !=, &gt;, &lt;, &gt;=, &lt;=, each one working the same way that they work as one would expect, with == being the replacement for equal to, since = is reserved for value assignments. . They also work on other types, such as string or list, and values at each index is compared in order to determine which one is greater for example: &quot;abg&quot;&lt;&quot;acd&quot; returns True, since the computer first goes to a and a, after they are the same, they go to b and c, and since c is &quot;greater&quot; than b, &quot;acd&quot; is greater than &quot;abg&quot; . print(&quot;True:&quot;,4 4) print(&quot;True:&quot;,1 0) print(&quot;False:&quot;,7 3) print(&quot;True:&quot;,5 6) print(&quot;False:&quot;,7 8) print(&quot;True:&quot;,3 3) print(&#39;&#39;) # Same as above, but now for other values other than int print(&#39;True:&#39;,&quot;as&quot; &quot;as&quot;) print(&quot;False&quot;,True False) print(&quot;False:&quot;,[2,3,1] [2,3,1]) print(&quot;True:&quot;,&#39;af&#39; &#39;bc&#39;) print(&quot;False:&quot;,&#39;ce&#39; &#39;cf&#39;) print(&quot;True:&quot;,[1,&#39;b&#39;] [1,&#39;a&#39;]) print(&#39;&#39;) . Logical Operators . These are operators that works on operand(s) to produce a single boolean result. Examples include and, or, not. . and returns true when both operands around it is true. . or returns true when at least one of its operands is true. . not returns true when the boolean after it is false. . They work the same way in binary, returning a specific value after specific inputs that is shown in a Truth Table . print(&quot;True:&quot;, True False) print(&quot;False:&quot;, True) print(&quot;True:&quot;, True True) print(&quot;False:&quot;, True) print(&quot;False:&quot;, True False) print(&quot;True:&quot;, False) . Combination of Relational and Logical Operators and the Procedure of Operations . Relational and Logical Operators can work by a set of precedece, a set of order that the computer understands the operations on. . Relational Operators goes first, and then Logical operators work in order of not, and, or . as usual, things in the parenthesis takes precedence over others . print( 3 3 4 6 5 7 ) .",
            "url": "https://jasoxddd.github.io/booleanConditionals/2022/12/06/boolean.html",
            "relUrl": "/2022/12/06/boolean.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Unit 3 Lesson 7 Nested Conditionals",
            "content": "Nested Conditional Statements . Nested Conditional Statements consist of conditional statemetns within conditional statements. | Flow Chart of a Nested Conditional Statement includes: | . if conditionA: # Code here executes when &#39;conditionA&#39; is True else: # Code that runs when &#39;conditionA&#39; is False if conditionB: # Code that runs when &#39;conditionA&#39; is False # and &#39;conditionB&#39; is True . Example of nested conditional in python: . n=int(input(&#39;Enter marks: &#39;)) # checking the conditions if n&gt;=75: if n &gt;=95: print(&#39;Excellent&#39;) else: print(&#39;Pass&#39;) else: print(&#39;Fail&#39;) . If Else Statements can be put inside of another if else statement using this layout for psuedo code. | . if (condition 1) if (condition 2) #first block of statement else #second block of statement else if (condition 3) #third block of statement else #fourth block of statement . Challenge #1: Create your own Nested Conditional, with a if/else statement inside the else code of an if/else statement. . def function(x, y, z): if() #Code here if() #Code here else #Code here else if() #Code here else #Code here . Challenge #2: Create your own Nested Conditional with operators and comparing values . Ex: . .",
            "url": "https://jasoxddd.github.io/booleanConditionals/fastpages/big%20idea%203/2022/12/06/.7-Nested-Conditionals.html",
            "relUrl": "/fastpages/big%20idea%203/2022/12/06/.7-Nested-Conditionals.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Homework",
            "content": "Homework/Hacks . our homework we have decided for a decimal number to binary converter. You must use conditional statements within your code and have a input box for where the decimal number will go. This will give you a 2.7 out of 3 and you may add anything else to the code to get above a 2.7. . Below is an example of decimal number to binary converter which you can use as a starting template. . def DecimalToBinary(num): strs = &quot;&quot; while num: # if (num &amp; 1) = 1 if (num &amp; 1): strs += &quot;1&quot; # if (num &amp; 1) = 0 else: strs += &quot;0&quot; # right shift by 1 num &gt;&gt;= 1 return strs # function to reverse the string def reverse(strs): print(strs[::-1]) # Driver Code num = 67 print(&quot;Binary of num 67 is:&quot;, end=&quot; &quot;) reverse(DecimalToBinary(num)) .",
            "url": "https://jasoxddd.github.io/booleanConditionals/week%2013/2022/11/30/homework.html",
            "relUrl": "/week%2013/2022/11/30/homework.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Unit 3 Lesson 7 Nested Conditionals",
            "content": "Nested Conditional Statements . Nested Conditional Statements consist of conditional statements within conditional statements. | Flow Chart of a Nested Conditional Statement includes: | . Format of a nested conditional in Pseudocode . IF (condition 1) { &lt;first block of statements&gt; } ELSE { IF (condition 2) { &lt;second block of statements&gt; } ELSE { &lt;third block of statements&gt; } } . Below are some examples of nested conditionals. . age = 19 isGraduated = False hasLicense = True # Look if person is 18 years or older if age &gt;= 18: print(&quot;You&#39;re 18 or older. Welcome to adulthood!&quot;) if isGraduated: print(&#39;Congratulations with your graduation!&#39;) if hasLicense: print(&#39;Happy driving!&#39;) . print(&quot;What is your grade on the quiz&quot;) grade = int(input(&#39;What is your grade on the quiz&#39;)) if grade &gt;= 90: print(&quot;Awesome grade. You do not need to make up the quiz.&quot;) else: if grade &gt;= 70: print(&quot;You may retake the quiz next class for up to an A.&quot;) else: print(&quot;We will review next class together and retake later.&quot;) . Now you try it! . Age = 51; if (Age == 30): print(&quot;your old&quot;) else: print(&quot;you should retire&quot;) if (Age &gt; 50): print(&quot;You have a beard&quot;) . you should retire You have a beard .",
            "url": "https://jasoxddd.github.io/booleanConditionals/fastpages/big%20idea%203/2022/11/29/3_7-Nested-Conditionals.html",
            "relUrl": "/fastpages/big%20idea%203/2022/11/29/3_7-Nested-Conditionals.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Unit 3 Lesson 6 Conditionals",
            "content": "Vocab . algorithm - A set of instructions that accomplish a task. selection - The process that determines which parts of an algoritm is being executed based on a condition that is true or false. . What is a conditional? . A conditional is a statement that affects the flow/outcome of a program by executing different statements based on the result of a true or false statement. That true or false statement is a boolean expression. . Conditionals appear in almost every programming language because of how important it is for changing the flow of the program. . Conditionals statements are used by the selection process for a program. . Question: What statement most commonly fills the role of a conditional in almost all programming languages? . If/Else Statements . In almost every programming language, if/else statements fill in the role of the conditional. Some languages call this switch blocks but if/else is the most used term. . If/Else Statement Example: . number = 3 # value that will affect true or false statement if number == 5: # if part determines if the statement is true or false compared to another part of the program print(&quot;yes, 5 does equal 5&quot;) else: #else part only executes if the if part is false print(&quot;no, &quot; + str(number) + &quot; does not equal 5&quot;) . no, 3 does not equal 5 . If/Else Statements can also just be if statements. This can be used more as an interruption rather then yes or no response. . If Statement Example: . progress = 0 while progress &lt; 100: print(str(progress) + &quot;%&quot;) if progress == 50: print(&quot;Half way there&quot;) progress = progress + 10 print(&quot;100%&quot; + &quot; Complete&quot;) . 0% 10% 20% 30% 40% 50% Half way there 60% 70% 80% 90% 100% Complete .",
            "url": "https://jasoxddd.github.io/booleanConditionals/fastpages/big%20idea%203/2022/11/28/3_6-Lesson-Conditationals.html",
            "relUrl": "/fastpages/big%20idea%203/2022/11/28/3_6-Lesson-Conditationals.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Unit 3 Lesson 5 Booleans Expressions",
            "content": "Introduction to the Lesson . Booleans are like binary, having 2 possible values, but in Boolean, True is 1 and False is 0. By using boolean operators, a boolean value can be produced. . Important Vocabulary . Boolean | Relational Operator | Logical Operator | . Boolean Operators . Boolean operators produces booleans after it is used between two values . Relational Operators . Relational Operators can work between any two values of the same type known as operands, provided that the type supports such types of operators They consist of the operators ==, !=, &gt;, &lt;, &gt;=, &lt;=, each one working the same way that they work as one would expect, with == being the replacement for equal to, since = is reserved for value assignments. . They also work on other types, such as string or list, and values at each index is compared in order to determine which one is greater for example: &quot;abg&quot;&lt;&quot;acd&quot; returns True, since the computer first goes to a and a, after they are the same, they go to b and c, and since c is &quot;greater&quot; than b, &quot;acd&quot; is greater than &quot;abg&quot; . print(&quot;True:&quot;,4 4) print(&quot;True:&quot;,1 0) print(&quot;False:&quot;,7 3) print(&quot;True:&quot;,5 6) print(&quot;False:&quot;,7 8) print(&quot;True:&quot;,3 3) print(&#39;&#39;) # Same as above, but now for other values other than int print(&#39;True:&#39;,&quot;as&quot;&quot;as&quot;) print(&quot;False&quot;,TrueFalse) print(&quot;False:&quot;,[2,3,1][2,3,1]) print(&quot;True:&quot;,&#39;af&#39;&#39;bc&#39;) print(&quot;False:&quot;,&#39;ce&#39;&#39;cf&#39;) print(&quot;True:&quot;,[1,&#39;b&#39;][1,&#39;a&#39;]) print(&#39;&#39;) . Logical Operators . These are operators that works on operand(s) to produce a single boolean result. Examples include and, or, not. . and returns true when both operands around it is true. . or returns true when at least one of its operands is true. . not returns true when the boolean after it is false. . They work the same way in binary, returning a specific value after specific inputs that is shown in a Truth Table . print(&quot;True:&quot;, True False) print(&quot;False:&quot;, True) print(&quot;True:&quot;, True True) print(&quot;False:&quot;, True) print(&quot;False:&quot;, True False) print(&quot;True:&quot;, False) . Combination of Relational and Logical Operators and the Procedure of Operations . Relational and Logical Operators can work by a set of precedece, a set of order that the computer understands the operations on. . Relational Operators goes first, and then Logical operators work in order of not, and, or . as usual, things in the parenthesis takes precedence over others . print( 3 3 4 6 5 7) .",
            "url": "https://jasoxddd.github.io/booleanConditionals/fastpages/big%20idea%203/2022/11/27/3_5-Boolean-Expressions.html",
            "relUrl": "/fastpages/big%20idea%203/2022/11/27/3_5-Boolean-Expressions.html",
            "date": " • Nov 27, 2022"
        }
        
    
  

  
  

  

  
  

  

  
  

  

  
      ,"page6": {
          "title": "Vocab",
          "content": "Greater than: &gt; | Less than: &lt; | Greater than or equal to: &gt;= | Less than or equal to: &lt;= | Equal to: == | Not Equal to: != | Boolean expression: A logical statement that is either TRUE or FALSE | Conditional: used to handle conditions in your program. | Nested conditional: an if or if else statement inside another if else statement. | .",
          "url": "https://jasoxddd.github.io/booleanConditionals/_pages/vocab.html",
          "relUrl": "/_pages/vocab.html",
          "date": ""
      }
      
  

  
  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jasoxddd.github.io/booleanConditionals/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}