{
  
    
        "post0": {
            "title": "Homework",
            "content": "Homework/Hacks . For our homework we have decided for a decimal number to binary converter. You must use conditional statements within your code and have a input box for where the decimal number will go. This will give you a 2.7 out of 3 and you may add anything else to the code to get above a 2.7. . Below is an example of decimal number to binary converter which you can use as a starting template. . def DecimalToBinary(num): strs = &quot;&quot; while num: # if (num &amp; 1) = 1 if (num &amp; 1): strs += &quot;1&quot; # if (num &amp; 1) = 0 else: strs += &quot;0&quot; # right shift by 1 num &gt;&gt;= 1 return strs # function to reverse the string def reverse(strs): print(strs[::-1]) # Driver Code num = 67 print(&quot;Binary of num 67 is:&quot;, end=&quot; &quot;) reverse(DecimalToBinary(num)) .",
            "url": "https://jasoxddd.github.io/booleanConditionals/jupyter/week%2013/2022/11/30/homework.html",
            "relUrl": "/jupyter/week%2013/2022/11/30/homework.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Unit 3 Lesson 7 Nested Conditionals",
            "content": "Nested Conditional Statements . Nested Conditional Statements consist of conditional statements within conditional statements. | Flow Chart of a Nested Conditional Statement includes: | . Format of a nested conditional in Pseudocode . IF (condition 1) { &lt;first block of statements&gt; } ELSE { IF (condition 2) { &lt;second block of statements&gt; } ELSE { &lt;third block of statements&gt; } } . Below are some examples of nested conditionals. . age = 19 isGraduated = False hasLicense = True # Look if person is 18 years or older if age &gt;= 18: print(&quot;You&#39;re 18 or older. Welcome to adulthood!&quot;) if isGraduated: print(&#39;Congratulations with your graduation!&#39;) if hasLicense: print(&#39;Happy driving!&#39;) . You&#39;re 18 or older. Welcome to adulthood! Happy driving! . print(&quot;What is your grade on the quiz&quot;) grade = int(input(&#39;What is your grade on the quiz&#39;)) if grade &gt;= 90: print(&quot;Awesome grade. You do not need to make up the quiz.&quot;) else: if grade &gt;= 70: print(&quot;You may retake the quiz next class for up to an A.&quot;) else: print(&quot;We will review next class together and retake later.&quot;) . What is your grade on the quiz Awesome grade. You do not need to make up the quiz. . Now try it you try it! .",
            "url": "https://jasoxddd.github.io/booleanConditionals/fastpages/big%20idea%203/2022/11/29/nested-conditionals.html",
            "relUrl": "/fastpages/big%20idea%203/2022/11/29/nested-conditionals.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Nested Conditional Statements",
            "content": "if conditionA: # Code here executes when &#39;conditionA&#39; is True else: # Code that runs when &#39;conditionA&#39; is False if conditionB: # Code that runs when &#39;conditionA&#39; is False # and &#39;conditionB&#39; is True . n=int(input(&#39;Enter marks: &#39;)) # checking the conditions if n&gt;=75: if n &gt;=95: print(&#39;Excellent&#39;) else: print(&#39;Pass&#39;) else: print(&#39;Fail&#39;) . If Else Statements can be put inside of another if else statement using this layout for psuedo code. | . if (condition 1) if (condition 2) first block of statement else second block of statement else if (condition 3) third block of statement else fourth block of statement . Challenge: Create your own Nested Conditional, with a if statement inside the else code of an if/else statement. . .",
            "url": "https://jasoxddd.github.io/booleanConditionals/2022/11/28/nestedconditionals.html",
            "relUrl": "/2022/11/28/nestedconditionals.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Unit 3 Lesson 6 Conditionals",
            "content": "Vocab . algorithm - A set of instructions that accomplish a task. selection - The process that determines which parts of an algoritm is being executed based on a condition that is true or false. . What is a conditional? . A conditional is a statement that affects the flow/outcome of a program by executing different statements based on the result of a true or false statement. That true or false statement is a boolean expression. . Conditionals appear in almost every programming language because of how important it is for changing the flow of the program. . Conditionals statements are used by the selection process for a program. . Question: What statement most commonly fills the role of a conditional in almost all programming languages? . If/Else Statements . In almost every programming language, if/else statements fill in the role of the conditional. Some languages call this switch blocks but if/else is the most used term. . If/Else Statement Example: . number = 3 # value that will affect true or false statement if number == 5: # if part determines if the statement is true or false compared to another part of the program print(&quot;yes, 5 does equal 5&quot;) else: #else part only executes if the if part is false print(&quot;no, &quot; + str(number) + &quot; does not equal 5&quot;) . no, 3 does not equal 5 . If/Else Statements can also just be if statements. This can be used more as an interruption rather then yes or no response. . If Statement Example: . progress = 0 while progress &lt; 100: print(str(progress) + &quot;%&quot;) if progress == 50: print(&quot;Half way there&quot;) progress = progress + 10 print(&quot;100%&quot; + &quot; Complete&quot;) . 0% 10% 20% 30% 40% 50% Half way there 60% 70% 80% 90% 100% Complete .",
            "url": "https://jasoxddd.github.io/booleanConditionals/fastpages/big%20idea%203/2022/11/28/3.6_Lesson_Conditationals.html",
            "relUrl": "/fastpages/big%20idea%203/2022/11/28/3.6_Lesson_Conditationals.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Booleans and Conditionals Lesson Plan",
            "content": "Introduction to the Lesson . Go over the basics of Booleans, (Linking it to Binary) True and False - 1 and 0 Introduce to flow control and use of flowchart . Important Vocabulary . Boolean | Relational Operator | Logical Operator | Conditional | Nested Conditionals | . Boolean Operators . Boolean operators produces booleans after it is used between two values . Relational Operators . Relational Operators can work between any two values of the same type known as operands, provided that the type supports such types of operators They consist of the operators ==, !=, &gt;, &lt;, &gt;=, &lt;= . print(&quot;4==4:&quot;,4==4) print(&quot;2==3:&quot;,2==3) print(&quot;1!=0:&quot;,1!=0) print(&quot;7&gt;3:&quot;,7&gt;3) print(&quot;5&lt;6:&quot;,5&lt;6) print(&quot;7&gt;=8:&quot;,7&gt;=8) print(&quot;3&lt;=3:&quot;,3&lt;=3) print(&#39;&#39;) # == operator works on many other types as well (!= as well) print(&#39;&quot;as&quot;==&quot;as&quot;:&#39;,&quot;as&quot;==&quot;as&quot;) print(&quot;True==False:&quot;,True==False) print(&quot;[2,3,1]!=[2,3,1]:&quot;,[2,3,1]!=[2,3,1]) print(&#39;&#39;) # Surprisingly, &gt;, &lt;, &gt;=, &lt;= works for strings and lists as well, the way they work is by comparing the first part, and if the first part doesn&#39;t give a answer, go to the next one print(&quot;&#39;af&#39;&lt;&#39;bc&#39;:&quot;,&#39;af&#39;&lt;&#39;bc&#39;) print(&quot;&#39;ce&#39;&gt;&#39;cf&#39;:&quot;,&#39;ce&#39;&gt;&#39;cf&#39;) print(&quot;[1,&#39;b&#39;]&gt;=[1,&#39;a&#39;]:&quot;,[1,&#39;b&#39;]&gt;=[1,&#39;a&#39;]) # It works for lists that have the same type at same indices that are being compared as well print(&#39;&#39;) # They don&#39;t work between two values of the same type # print(1&lt;&#39;a&#39;) returns a type error # However, if two values inside a list at the same indexs have different types, but are not considered (the previous values already determine the results) then a comparison can be made print(&quot;[1,&#39;a&#39;,3]&lt;[1,&#39;b&#39;,&#39;c&#39;]:&quot;,[1,&#39;a&#39;,3]&lt;[1,&#39;b&#39;,&#39;c&#39;]) . 4==4: True 2==3: False 1!=0: True 7&gt;3: True 5&lt;6: True 7&gt;=8: False 3&lt;=3: True &#34;as&#34;==&#34;as&#34;: True True==False: False [2,3,1]!=[2,3,1]: False &#39;af&#39;&lt;&#39;bc&#39;: True &#39;ce&#39;&gt;&#39;cf&#39;: False [1,&#39;b&#39;]&gt;=[1,&#39;a&#39;]: True [1,&#39;a&#39;,3]&lt;[1,&#39;b&#39;,&#39;c&#39;]: True . Logical Operators . These are operators that works on operand(s) to produce a single boolean result. Examples include and, or, not. and returns true when both operands around it is true or returns true when at least one of its operands is true not returns true when the boolean after it is false . for i in [False, True]: for j in [False, True]: print(i,&quot;and&quot;,j,&quot;is&quot;,i and j) print(&quot;&quot;) # results of or given all of its possible operands for i in [False, True]: for j in [False, True]: print(i,&quot;or&quot;,j,&quot;is&quot;,i or j) print(&quot;&quot;) # results of not given all of its possible operands for i in [False, True]: print(&quot;not&quot;,i,&quot;is&quot;, not i) . False and False is False False and True is False True and False is False True and True is True False or False is False False or True is True True or False is True True or True is True not False is True not True is False . Combination of Relational and Logical Operators and the Procedure of Operations . Relational and Logical Operators can work by a set of precedece, a set of order that the computer understands the operations on. Relational Operators goes first, and then Logical operators work in order of not, and, or as usual, things in the parenthesis takes precedence over others . print(&quot;3 &gt; 2 and True:&quot;, 3 &gt; 2 and True) print(&quot;not 4 &lt; 6:&quot;, not 4 &lt; 6) print(&quot;6 &gt; 7 or 3&lt;1:&quot;, 6 &gt; 7 or 3 &lt; 1) # The relational expressions is evaluated first print(&quot;not 5&lt;6 and True or False:&quot;,not 5&lt;6 and True or False) # 5&lt;6 is translated to True first # then not translates not 5&lt;6 to False # then and translates not 5&lt;6 and True to False # then or translates not 5&lt;6 and True or False to False . 3 &gt; 2 and True: True not 4 &lt; 6: False 6 &gt; 7 or 3&lt;1: False not 5&lt;6 and True or False: False .",
            "url": "https://jasoxddd.github.io/booleanConditionals/jupyter/2022/11/19/Lesson-Plan.html",
            "relUrl": "/jupyter/2022/11/19/Lesson-Plan.html",
            "date": " • Nov 19, 2022"
        }
        
    
  

  
  

  

  
  

  

  
  

  

  
      ,"page6": {
          "title": "Vocab",
          "content": "Greater than: &gt; | Less than: &lt; | Greater than or equal to: &gt;= | Less than or equal to: &lt;= | Equal to: == | Not Equal to: != | Boolean expression: A logical statement that is either TRUE or FALSE | Conditional: used to handle conditions in your program. | Nested conditional: an if or if else statement inside another if else statement. | .",
          "url": "https://jasoxddd.github.io/booleanConditionals/_pages/vocab.html",
          "relUrl": "/_pages/vocab.html",
          "date": ""
      }
      
  

  
  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jasoxddd.github.io/booleanConditionals/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}